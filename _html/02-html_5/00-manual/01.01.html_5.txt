
## HTML 5 ##

01. HTML 5
02. HTML5 - New Elements in HTML5
03. HTML5 - The List of Content Models
04. HTML5 - header tag
05. HTML5 - footer tag
06. HTML5 - nav tag
07. HTML5 - <article> tag  (is the <div> tag of html4)
08. HTML5 - <section> tag Element
09. HTML5 - <aside> tag Element
10. HTML5 - <audio> tag Element
11. HTML5 - <video> tag Element
12. HTML5 - <progress> tag Element (Progress-Bar) -
13. HTML5 - API - Web Storage - cookie(), sessionStorage(), localStorage()
14. HTML5 - API - Geolocation (GPS)
15. HTML5 - API -- Drag -and- Drop
16. HTML5 - SVG
16.02. HTML5 - <svg> tag 
16.03. HTML5 - <circle> tag
16.04. HTML5 - <rect> tag - (rect/rectangle)
16.05. HTML5 - <line> tag 
16.06. HTML5 - <polyline> tag 
16.07. HTML5 - <ellipse> tag 
16.08. HTML5 - <polygon> tag
16.09. HTML5 - <animate> tag 
16.10. HTML5 - <Paths> tag 


.
.
01. HTML 5 - 

- HTML 5 - first line declaration
<!DOCTYPE HTML> 

- character encoding (charset) declaration
<meta charset="UTF-8">

-!- The default character encoding in HTML5 is UTF-8.

.
.
02. HTML5 - New Elements in HTML5 - 

<article>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <footer>, <header>, <nav>, <output>, <progress>, <section>, <video>  

- Forms
-- The Web Forms 2.0 specification allows for creation of more powerful forms and more compelling user experiences.
-- Date pickers, color pickers, and numeric stepper controls have been added.
-- Input field types now include email, search, and URL.
-- PUT and DELETE form methods are now supported.

- Integrated API (Application Programming Interfaces) 
-- Drag and Drop
-- Audio and Video
-- Offline Web Applications
-- History
-- Local Storage
-- Geolocation
-- Web Messaging

.
.
03. HTML5 - The List of Content Models - 

- HTML elements typically belonged in either the "block level" -or- "inline content" model. 

- HTML5 introduces seven main content models.
-- Metadata
-- Embedded
-- Interactive
-- Heading
-- Phrasing
-- Flow
-- Sectioning 


- Content Models

Metadata: 
Content that sets up the presentation or behavior of the rest of the content. 
These elements are found in the head of the document.
Elements: 
<base>, <link>, <meta>, <noscript>, <script>, <style>, <title>

Embedded: 
Content that imports other resources into the document.
Elements: 
<audio>, <video>, <canvas>, <iframe>, <img>, <math>, <object>, <svg>

Interactive: 
Content specifically intended for user interaction.
Elements: 
<a>, <audio>, <video>, <button>, <details>, <embed>, <iframe>, <img>, <input>, <label>, <object>, <select>, <textarea>

Heading: 
Defines a section header.
Elements: 
<h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <hgroup>


Phrasing: 
This model has a number of inline level elements in common with HTML4.
Elements: 
<img>, <span>, <strong>, <label>, <br />, <small>, <sub>, and more.


Content Models

Flow content: 
Contains the majority of HTML5 elements that would be included in the normal flow of the document.

Sectioning content: 
Defines the scope of headings, content, navigation, and footers.
Elements: <article>, <aside>, <nav>, <section>

--- example: Content Models:
    <html5-Content-Models.jpeg>

--- example: A generic HTML5 page structure looks like this:
    <HTML5-page-structure.png>

.
.
04. HTML5 - header tag -

-- The <header> element represents a container for introductory content or a set of navigational links.
-- A <header> element typically contains:
--- one or more heading elements (<h1> - <h6>)
--- logo or icon
--- authorship information
--- You can have several <header> elements in one document.
-!- A <header> tag cannot be placed within a <footer>, <address> or another <header> element.

- header html4 style:
  <div id="header">

- header html5 style:
  <header>

- <header> element is appropriate for use inside the body tag.

--- example: header element tag

<!DOCTYPE html>
<html>
    <head></head>
    <body>
        <header>
            <h1>Title 1</h1>
            <h3>sub title</h3>
        </header>
        <header>
            <h1>Title 2</h1>
            <div>div 1</div>
            <div>div 2</div>
            <span>  span 1 </span> <span> span 2</span>
        </header>
    </body>
</html>

--- example: header element tag
    <04.01_tag__header.html>

.
.
05. HTML5 - footer tag - 

- <footer> Element

-- <footer> element refer to a section located at the very bottom of the web page.
   <footer> footer element </footer>

-- <footer> tag common use:
- Contact Information
- Privacy Policy
- Social Media Icons
- Terms of Service
- Copyright Information
- Sitemap and Related Documents

--- example: footer tag
    <05.01_tag__footer.html>

.
.
06. HTML5 - nav tag - 

-  <nav> Element

-- <nav> tag represents a section of a page that links to other pages -or- to certain sections within the page. 

-- <nav> tag defines a set of navigation links.

-!- NOT all links of a document should be inside a <nav> element. 
   <nav> element is intended only for major block of navigation links.

-!- Browsers, such as screen readers for disabled users, can use this element to determine whether to omit the initial rendering of this content.

--- example: <nav> tag create a section with navigation links. 

<nav>
    <ul>
        <li><a href="#">Home</a></li>
        <li><a href="#">Services</a></li>
        <li><a href="#">About us</a></li>
    </ul>
</nav>

<nav>
    <span>test1</span>
    <span>test1</span>
    span>test1</span>
</nav>


--- example: <nav> tag create a section with navigation links. 
    <06.01_tag__nav.html>

-!- all of the links in a document should be inside a <nav> element. 
   <nav> element is intended only for major blocks of navigation links. 
   Typically, the <footer> element often has a list of links that don't need to be in a <nav> element.

.
.
07. HTML5 - <article> tag  (is the <div> tag of html4) - 

-  <Article> tag is a self-contained, 
   independent piece of content that can be used and distributed separately from the rest of the page or site. 
   An article should make sense on its own and it should be possible to distribute it independently from the rest of the site.

-- The <article> tag specifies independent, self-contained content.

-- This could be:
--- a forum post
--- a magazine or newspaper article, 
--- a blog entry, a comment, 
--- an interactive widget or gadget, 
--- or any other independent piece of content. 
--- News story
--- Comment

-!- The <article> tag element replaces the <div> tag element that was widely used in HTML4, along with an id or class.
-!- <article> tag instead of <div> tag

--- example:

    <article>
        <h1>The article title</h1> 
        <p>Contents of the article element </p>
    </article>


    <article>
        <h1>article H1</h1>
        <p>article p tag</p>
    </article>

--- example: article tag
    <07.01_tag__artical.html>

-!- When an <article> element is nested, 
   the inner <article> element represents an article related to the outer <article> element. 
   example:
   blog post comments can be <article> elements nested in the <article> representing the blog post.

.
.
08. HTML5 - <section> tag Element - 

- <section> is a logical container of the page or <article>. 
-- Sections can be used to divide up content within an article.
--- example:
    a homepage could have a section for introducing the company, 
    another section for news items, 
    and still another section for contact information.

-- Each <section> should be identified, typically by including a heading (h1-h6 element) as a child of the <section> element.

--- example: <section> tag inside <article> tag

    <article>
        <h1>article</h1>
        <section>
            <h1>section Heading</h1>
            <p>section content</p>
        </section>
    </article>

--- example: <section> tag inside <article> tag
    <08.01_tag__section.html>

--- example: artical and section example
    <article>
        <h1>Welcome</h1>
        <section>
            <h1>Heading</h1>
            <p>content or image</p>
        </section>
        <section>
            <h1>Heading</h1>
            <p>content or image</p>
        </section>
    </article>

    <article>
        <h1>Welcome</h1>0. HTML5 - <audio> tag Element
        <section>
            <h1>Heading</h1>
            <p>content or image</p>
        </section>
    </article>

    <article>
        <h1>Welcome</h1>
        <section>
            <h1>Heading</h1>
            <p>content or image</p>
        </section>
    </article>

-!- If it makes sense to separately syndicate/unate the content of a <section> element, use an <article> element instead.

-!- separated text subject separated <article> tag

.
.
09. HTML5 - <aside> tag Element - 

-  <aside> tag is secondary or relating to content (tangential content) 
   which could be considered separate from but indirectly related to the main content.
-- <aside> tag is used within an <article> tag. 
-- <aside> tag defines some content aside from the content it is placed in.
-!- the content of the <aside> should be specifically related to that article.
    (The aside content should be related to the surrounding content).

--- example: <aside> tag inside <artical> tag.

    <artical>
        <section>
            <h1>JSON</h1>
            <p>In computing, JavaScript Object Notation (JSON) is an open-standard file format that uses human-readable
                text to transmit data objects consisting of attributeâ€“value pairs and array data types.</p>
        </section>
        <aside>
            <!-- <h1>XML</h1> -->
            <p>XML (Extensible Markup Language) - is a markup language that defines a set of rules for encoding
                documents in a format that is both human-readable and machine-readable.</p>
        </aside>
    </artical>

--- example: <aside> tag inside <artical> tag.
    <09.01_tag__aside.html>

-!- When an <aside> tag is used outside of an <article> tag, its content should be related to the surrounding content.

.
.
10. HTML5 - <audio> tag Element -

- The HTML5 <audio> element specifies a standard for embedding audio in a web page.

- There are two different ways to specify the audio source file's URL. 
-- source attribute "src="source-of-audio"
-- <source> tag nest the <audio> tag (<source> tag inside <audio> tag):
   -!- Multiple <source> elements can be linked to different audio files. 
        The browser will use the first recognized format.

--- example: source attribute "src="source-of-audio"

    <audio src="URL/audio.mp3" controls>
         Audio element not supported by your browser
    </audio>

--- example: <source> tag nest the <audio> tag (<source> tag inside <audio> tag) 
             and display error message if audio no supported:

    <audio controls>
        <source src="URL/audio.mp3" type="audio/mpeg">
        <source src="URL/audio.ogg" type="audio/ogg">
        Error - Audio element not supported by your browser. 
    </audio>


- <audio> tag support 3 file formats: 
-- MP3 --  type="audio/mpeg"
-- WAV --  type="audio/wav"
-- OGG --  type="audio/ogg"


- <audio> Attributes
-- autoplay - start playing audio as soon as it is ready.
-- controls - display audio controls, (play, pause, volume).
-- loop -  play audio endless times
-- muted - audio output should be muted.
-- preload - audio loaded when the page loads.

--- example: <audio> tag Element .
    <10.01_tag__audio.html>

.
.
11. HTML5 - <video> tag Element -

- The HTML5 <video> element specifies a standard for embedding video in a web page.

- <video> tag support 3 file formats: 
-- MP4  --  type="video/mp4"
-- WebM --  type="video/WebM"
-- OGG  --  type="video/ogg"

--- example: video tag + controls Attributes

    <video controls>
        <source src="https://ofekbytes.github.io/assets/videos/sea.mp4" type="video/mp4">
        <source src="https://ofekbytes.github.io/assets/videos/sea.webm" type="video/WebM">
        Your browser does not support the video element.
    </video>


- <video> Attributes
-- autoplay - start playing audio as soon as it is ready.
-- controls - display audio controls, (play, pause, volume).
-- loop -  play audio endless times
-- muted - audio output should be muted.
-- preload - audio loaded when the page loads.
-- width - width of video display.
-- height - height of video display.
-!- If height and width are not set, the page might flicker while the video loads.


--- example: <video> tag Element .
    <11.01_tag__video.html>

.
.
12. HTML5 - Progress Bar -  <progress> tag Element -


- The HTML5 <progress> element provides the ability to create progress bars on the web.

--- example: Progress Bar

    Downloading progress:
    <progress value="22" max="100"></progress>

- <progress> Attributes
-- Value: (current number value) - Specifies how much of the task has been completed.
-- Max: (total/max number value) -  Specifies how much work the task requires in total.

--- example: <video> tag Element .
    <12.01_tag__progress.html>

.
.
13. HTML5 - API - Web Storage - cookie(), sessionStorage(), localStorage()

- Capacity
-- Cookies - 4kb
-- Session Storage - 5mb
-- Local Storage - 10mb
.
.
- Expires
-- Cookies - Manually set	
-- Session Storage - On tab close
-- Local Storage - Never (no expiration date)
.
.
- Storage Location
-- Cookies - Browser and server	
-- Session Storage - Browser only
-- Local Storage - Browser only
.
.
- Sent with requests
-- Cookies - Yes
-- Session Storage - No
-- Local Storage - No
.
.
The Advantages of Web Storage
- More secure
- Faster
- Stores a larger amount of data
- Stored data is not sent with every server request

-!- Local storage is per domain. 
    All pages from one domain can store and access the same data.

.
.
- Cookies - 

-- Cookies are data, stored in small text files, on your computer.
   When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.
   Cookies were invented to solve the problem "how to remember information about the user":
   When a user visits a web page, his/her name can be stored in a cookie.
   Next time the user visits the page, the cookie "remembers" his/her name.
   Cookies are saved in name-value pairs:
   When a browser requests a web page from a server, cookies belonging to the page are added to the request. 
   This way the server gets the necessary data to "remember" information about users.

--- example: username
    username = 'John Doe';

JavaScript cookies property ("document.cookie") can create, read, delete cookies.

document.cookie = "hello=true";
document.cookie = "doSomethingOnlyOnce=true; expires=Fri, 31 Dec 9999 23:59:59 GMT";
document.cookie = "person=test; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/"

document.cookie = "person=test; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

console.log(document.cookie)


--- example: API - Web Storage - cookie
    <13.01.01_cookies__Web_Storage_API.html>

.
.
- Session Storage - 

-- Storing a Value:
   sessionStorage.setItem("key1", "value1");
   sessionStorage.setItem('breakfast', 'cereal');

-- Getting a Value (print value):
   console.log(sessionStorage.getItem("key1")); 
   console.log(sessionStorage.getItem('breakfast'));

-- Removing a Value:
   sessionStorage.removeItem("key1");
   sessionStorage.removeItem('breakfast');

-- Removing All Values:
   sessionStorage.clear();


--- example: API - Web Storage - sessionStorage 
    <13.02.01_sessionStorage__Web_Storage_API.html>

.
.
- Local Storage (localStorage) - 

-- Storing a Value:
   localStorage.setItem("key1", "value1");
   localStorage.setItem('breakfast', 'cereal');

-- Getting a Value (print value):
   console.log(localStorage.getItem("key1")); 
   console.log(localStorage.getItem('breakfast'));

-- Removing a Value:
   localStorage.removeItem("key1");
   localStorage.removeItem('breakfast');

-- Removing All Values:
   localStorage.clear();


--- example: <video> tag Element .
    <13.03.01_localStorage__Web_Storage_API.html>
    <13.03.02_localStorage__Web_Storage_API.html>

.
.
14. HTML5 - API - Geolocation (GPS)

- The HTML 5 Geolocation API is used to locate a user's position.
  Since this can compromise privacy, the position is not available unless the user approves it.


--- example: get Current Position - getCurrentPosition() :
    navigator.geolocation.getCurrentPosition();

- Parameters:
-- showLocation (mandatory) -->  Defines the callback method that retrieves location information.
-- ErrorHandler(optional) -->  Defines the callback method that is invoked when an error occurs in processing the asynchronous call.
-- Options (optional) -->  Defines a set of options for retrieving the location information.


- Presenting Data in 2/two ways: Geodetic -and- Civic.

1. geodetic - describe position latitude -and- longitude.
2. civic - describe location data.

-- getCurrentPosition() method returns an object (latitude, longitude, accuracy properties).


--- example: get latitude -and- longitude
   
    var currentLocation = document.getElementById("output");

    function getLocation() {
        //Check if Geolocation is supported
        if (navigator.geolocation) {
            // yes supported -> get Current Position (use showPosition() method)
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            // not supported -> end program with error message
            currentLocation.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {
        currentLocation.innerHTML = "Latitude: " + position.coords.latitude +
            "<br>Longitude: " + position.coords.longitude;
    }


--- example: get latitude -and- longitude
    <14.01_geolocation__API.html>

-!- if we have a map latitude -and- longitude and we want to find out the  street name -or- the city name -or- the state name, 
    we will need to buy a server service that will give us this information. 
    example: google map service.

.
.
15. HTML5 - API -- Drag -and- Drop

- Drag and drop is a very common feature. 
  "grab" an object and drag it to a different location.
  Any element can be draggable.


--- example: set <img> tag to be draggable.
    <img draggable="true" />


--- example: drag amd drp[]

    <!DOCTYPE HTML>
    <html>

    <head>
    <script>
        function allowDrop(ev) {
        ev.preventDefault();
        }

        function drag(ev) {
        /// step 2: id="image" ///
        ev.dataTransfer.setData("text", ev.target.id);
        }

        function drop(ev) {
        /// step 5: prevents the browser default ///
        ev.preventDefault();

        /// step 6 + 7: ragged data can be accessed  + The dragged data is the "ID" ///
        var data = ev.dataTransfer.getData("text");

        /// step 8: appended into the drop element ///
          ev.target.appendChild(document.getElementById(data));
        }
    </script>
    </head>
    <body>
        <!-- step 3 + 4: dragged data can be dropped + drop event occurs -->
        <div id="box" ondrop="drop(event)" ondragover="allowDrop(event)" style="border:1px solid black; 
        width:200px; height:200px"></div>

        <!-- step 1: "drag(event)" -->
        <img id="image" src="https://ofekbytes.github.io/assets/images/picture/star.jpg" draggable="true"
            ondragstart="drag(event)" width="150" height="50" alt="" />
    </body>
    </html>


- step 1: 
  When the element is dragged, "ondragstart" attribute calls the function "drag(event)" 
  which specifies what data is to be dragged.

- step 2:
  set data type ("text"), and the value of the dragged data "image" (id="image").

- step 3:
  The "ondragover" event specifies where the dragged data can be dropped
  To allow a drop by calling the "event.preventDefault()" method for the ondragover event.

- step 4:
  When the dragged data is dropped, a drop event occurs. 
  the "ondrop" attribute calls a function, drop(event)

- step 5:
  "preventDefault" method prevents the browser default handling of the data (default is open as link on drop).

- step 6:
  The dragged data can be accessed with the "dataTransfer.getData()" method. 

- step 7:
  This method will return any data that was set to the same type in the setData() method (step 2).
  The dragged data is the "ID" of the dragged element ("image").

- step 8:
  the dragged element is appended into the drop element, using the "appendChild()" function.


--- example: get latitude -and- longitude
    <15.01_DragAndDrop__API.html>
    <15.02_DragAndDrop__API.html>
    <15.03_DragAndDrop__API.html>
    <15.04_DragAndDrop__API.html>

.
.
16. HTML5 - SVG 

- SVG (Scalable Vector Graphics) - 
-- html5 allows direct embedding of SVG tags in an HTML document.
-- SVG is used to draw shapes with HTML-style markup.
-- SVG can draw paths, boxes, circles, text, graphic images.
-- SVG is a 2D vector image format based on an XML syntax.
-- Based on an XML syntax, SVG can be styled with CSS and made interactive using JavaScript. 

-- As a "vector image format", SVG graphics can scale infinitely (responsive design), 
   SVG provides a set of tools: clipping, masking, filters, animations.


-- SVG image adding with <img> tag:

   <img src="https://ofekbytes.github.io/assets/icons/svg/125x125-pixels/40.svg" alt="" height="600" />

--- example: loading "svg" format file with html <img> tag.
    <16.01.01_tag__img.html>

.
.
16.02. HTML5 - <svg> tag 

- drawing - drawing will be done inside html <svg> tag .

- <svg> tag is like

- <svg> tag with two attributes: 
-- width 
-- height

--- svg width, height
<svg width="2000" height="1000">
 

--- example: <svg> tag with height and width.
    <16.02.01_tag__svg.html>

.
.
16.03. HTML5 - <circle> tag

- drawing circle - drawing circle with <circle> tag inside <svg> tag.


- <circle> tag parameters:

-- "cx" - pushes the center of the circle further to the right of the screen
          (The x-axis coordinate of the center of the circle).
          Value type: <length>|<percentage> 
          Default value: 0
          Animatable: yes

-- "cy" - pushes the center of the circle further down from the top of the screen
          (The y-axis coordinate of the center of the circle).
          Value type: <length>|<percentage> 
          Default value: 0
          Animatable: yes

-- "r" - defines the radius of the circle. 
         (A value lower or equal to zero disables rendering of the circle).
         Value type: <length> 
         Default value: 0
         Animatable: yes

-- "fill" - determines the color of our circle (default "black")
-- "stroke" - adds an outline to the circle
-- "stroke-width" - stroke width

-- "pathLength" - The total length for the circle's circumference, in user units.
                  Value type: <number> 
                  Default value: none
                  Animatable: yes


--- example: circle parameters:
    <circle cx, cy, radius, fill="none/color, stroke=color, stroke-width=width />


--- example: cricle
    <circle cx=100 cy=100 r=90 fill="none" stroke="green" />
    <circle cx=100 cy=100 r=90 fill="red" stroke="green" />
    <circle cx=500 cy=100 r=90 fill="green" stroke="red" stroke-width="4" />
    <circle cx=700 cy=100 r=90 fill=rgb(10,10,10) stroke=rgb(100,100,100) stroke-width="10" />


--- example: svg tag - clrcle
    <16.03.01_tag__svg_circle.html>
    <16.03.02_tag__svg_circle.html>

.
.
16.04. HTML5 - <rect> tag - (rect/rectangle)

- drawing rectangle - drawing rectangle with <rect> tag inside <svg> tag.


- <rect> tag parameters:

-- "x" - The x coordinate of the rectangle on the screen. (horizontal)
         Value type: <length>|<percentage> 
         Default value: 0
         Animatable: yes

-- "y" - The y coordinate of the rectangle on the screen. (vertical)
         Value type: <length>|<percentage> 
         Default value: 0
         Animatable: yes

-- "width" -  The width of the rectangle. 
              Value type: auto|<length>|<percentage> 
              Default value: auto
                Animatable: yes

-- "height" - The height of the rectangle. 
              Value type: auto|<length>|<percentage> 
              Default value: auto
              Animatable: yes

-- "fill" - determines the color of our rectangle (default "black")
-- "stroke" - adds an outline to the rectangle
-- "stroke-width" - stroke width

-- "rx" - The horizontal corner radius of the rectangle. 
          Defaults to ry if it is specified.
          Value type: auto|<length>|<percentage> 
          Default value: auto
          Animatable: yes

-- "ry" - The vertical corner radius of the rectangle. 
          Defaults to rx if it is specified.
          Value type: auto|<length>|<percentage> 
          Default value: auto
          Animatable: yes

-- "pathLength" - The total length of the rectangle's perimeter, in user units.
                  Value type: <number> 
                  Default value: none
                  Animatable: yes


--- example: rect parameters:
    <rect x, y, width, height, fill="none/color, stroke=color, stroke-width=width, rx, ry />


--- example: rectangle
    <rect width="75" height="25" x="300" y="1" fill="lightblue" stroke="blue" stroke-width="5" />
    <rect width="75" height="25" x="400" y="1" fill=rgb(10,10,10) stroke=rgb(100,100,100) stroke-width="6" />


--- example: rectangle
    <16.04.01_tag__svg_rect.html>
    <16.04.02_tag__svg_rect.html>

.
.
16.05. HTML5 - <line> tag 

- The <line> tag used to create a line connecting two points.


- <line> tag parameters:

-- "x1" - "x-axis" coordinate of the line starting point.
          Value type: <length>|<percentage>|<number> 
          Default value: 0
          Animatable: yes

-- "x2" - "x-axis" coordinate of the line ending point.
          Value type: <length>|<percentage>|<number> 
          Default value: 0
          Animatable: yes

-- "y1" - "y-axis" coordinate of the line starting point.
          Value type: <length>|<percentage>|<number> 
          Default value: 0
          Animatable: yes

-- "y2" - "y-axis" coordinate of the line ending point.
          Value type: <length>|<percentage>|<number>
          Default value: 0
          Animatable: yes

-- "pathLength" - Defines the total path length in user units.
                  Value type: <number> 
                  Default value: none
                  Animatable: yes

-!- no color = no line - 
    If you do not specify the stroke color the line will not be visible.


--- example: line parameters:
    <line x-start=number, y-start=number, x-end=number, y-end=number, stroke=color, stroke-width=width />


--- example: line
    <line x1="0" y1="0" x2="15" y2="150" stroke="red" stroke-width="2" />
    <line x1="0" y1="0" x2="20" y2="200" stroke=rgb(100,200,100) stroke-width="3" />


--- example: line
    <16.05.01_tag__svg_line.html>
    <16.05.02_tag__svg_line.html>

.
.
16.06. HTML5 - <polyline> tag 

- the <polyline> tag defines shapes built from multiple line definitions:


- <polyline> tag parameters:

-- "points" - This attribute defines the list of points (pairs of x,y absolute coordinates) required to draw the polyline
            Value type: <number>+ 
            Default value: ""
            Animatable: yes

-- "fill" - determines the color of our polyline (default "black")
-- "stroke" - adds an outline to the polyline
-- "stroke-width" - stroke width

--- example: polyline parameters:
    <polyline points="x,y, x,y, ..., x,y" fill="none/color", stroke="color" />


--- example: polyline
    <svg width="2000" height="500">
        <polyline style="
            stroke-linejoin:miter; 
            stroke:black; 
            stroke-width:12; 
            fill:none;"            
            points="100 100, 150 150, 200 100" />
    </svg>

--- example: polyline
    <16.06.01_tag__svg_polyline.html>
    <16.06.02_tag__svg_polyline.html>

.
.
16.07. HTML5 - <ellipse> tag 

- The <ellipse> tag, create ellipses based on a center coordinate, and both their x and y radius.
  (horizontal, vertical, rx, ry, attributes).


- <ellipse> tag parameters:

-- "cx" - The x position of the ellipse.
          Value type: <length>|<percentage> 
          Default value: 0
          Animatable: yes

-- "cy" - The y position of the ellipse.
          Value type: <length>|<percentage>
          Default value: 0
          Animatable: yes

-- "rx" - The radius of the ellipse on the x axis.
          Value type: auto|<length>|<percentage>
          Default value: auto
          Animatable: yes

-- "ry" - The radius of the ellipse on the y axis.
          Value type: auto|<length>|<percentage>
          Default value: auto
          Animatable: yes

-- "fill" - determines the color of our ellipse (default "black")
-- "stroke" - adds an outline to the ellipse
-- "stroke-width" - stroke width

-- "pathLength" - This attribute lets specify the total length for the path, in user units.
                Value type: <number>
                Default value: none
                Animatable: yes


--- example: ellipse parameters:
    <ellipse cx="x" cy="y" rx="radius-x" ry="radius-y" fill="none/color, stroke=color, stroke-width=width />


--- example: ellipse
    <ellipse cx="100" cy="50" rx="100" ry="50" />


--- example: ellipse
    <16.07.01_tag__svg_ellipse.html>
    <16.07.02_tag__svg_ellipse.html>

.
.
16.08. HTML5 - <polygon> tag 

- polygon - polygon mean "many angles" (poly = many, gon = angles).

- The <polygon> element defines a closed shape consisting of a set of connected straight line segments with at least three lines. 
  "close shape" mean that The polygon element closes off the shape for you (The last point is connected to the first point).


- <polygon> tag parameters:

-- points
   This attribute defines the list of points (pairs of x,y absolute coordinates) required to draw the polygon.
   Value type: <number>+ 
   Default value: ""
   Animatable: yes

-- pathLength
   This attribute lets specify the total length for the path, in user units.
   Value type: <number>
   Default value: none
   Animatable: yes

-- "fill" - determines the color of our polygon (default "black")
-- "stroke" - adds an outline to the polygon
-- "stroke-width" - stroke width


--- example: polygon parameters: (x y replaced by numbers)
    <polygon points="x y, x y, x y" fill=none/color stroke=color stroke-width=width />


--- example: polygon
   <polygon points="100 100, 200 200, 300 20" style="fill: green; stroke:red; stroke-width: 6;" />
    <polygon points="100 400, 200 400, 150 300" fill=none stroke=red stroke-width= 6 />


--- example: polygon
    <16.08.01_tag__svg_polygon.html>
    <16.08.02_tag__svg_polygon.html>

.
.
16.09. HTML5 - <animate> tag 

-  <animate> tag is a SVG animations.


- <animate> tag parameters:

-- Animation timing attributes
   begin, dur, end, min, max, restart, repeatCount, repeatDur, fill

-- Animation value attributes
   calcMode, values, keyTimes, keySplines, from, to, by

-- Other Animation attributes
   Most notably: attributeName, additive, accumulate

-- Animation event attributes
   Most notably: onbegin, onend, onrepeat

-- attributeName: shape attribute that will be affected by the animation

-1- shape eclipse - "cx"
    ellipse cx="0"
-2- animate the shape with the attribute Name attribute name - "cx"
    <animate attributeName="cx"

-- from: starting animate point for the value attribute.

-- to: ending animate point for the value attribute.

-- dur: (duration) how long the animation  will run.

-- fill: return the animation to the starting point location or freeze the animation in the end point location
         "Values" - return the animation to the starting point location at the end of the animation
         "freeze" - freeze the animation in the end point location at the end of the animation

-- repeatCount - animation repeat count (how many time the animation will execute) 
   1 -  run animation once 
   2 -  twice 
   indefinite -  run animation none stop.


--- example: animate - repeatCount - indefinite - run animation twice and freeze.
    <svg width="2000" height="1000">
      <ellipse cx="0" cy="100" rx="100" ry="50" fill="yellow" stroke="red" stroke-width="6">
        <animate attributeName="cx" from="10" to="1000" dur="3s" fill="freeze" repeatCount="2" />
      </ellipse>
    </svg>


--- example: animate - repeatCount - indefinite - run animation none stop and return to starting animate point.
    <svg width="2000" height="1000">
      <ellipse cx="0" cy="100" rx="100" ry="50" fill="yellow" stroke="red" stroke-width="6">
        <animate attributeName="cx" from="10" to="1000" dur="3s" fill="values" repeatCount="indefinite" />
      </ellipse>
    </svg>


--  values - The value holds a semicolon-separated list of one or more values. 
    values="0;15;0"


--- example: animate parameters:
    <ellipse cx="0" cy="300" rx="100" ry="50" fill="yellow" stroke="red" stroke-width="6">
        <animate attributeName="cx" from="x" to="x+value" dur="time-in-second" fill="freeze/value" repeatCount="couynter/indefinite" />
    </ellipse>



--- example: create a triangle and change its position every 3 second. 
    <svg width="2000" height="1000">
      <ellipse cx="0" cy="100" rx="100" ry="50" fill="yellow" stroke="red" stroke-width="6">
        <animate attributeName="cx" from="10" to="1000" dur="3s" fill="freeze" repeatCount="2" />
      </ellipse>
    </svg>


--- example: create a triangle and change its position every 3 second. 
    <16.09.01_tag__svg_animate.html>
    <16.09.02_tag__svg_animate.html>

.
.
16.10. HTML5 - <paths> tag 

-  <paths> - <path> tag define a shape/path.


- <paths> tag parameters:

-- d - This attribute defines the shape of the path.
       Value type: <string> 
       Default value: ''
       Animatable: yes

-- d - 
--- M: moveto
--- L: lineto
--- H: horizontal lineto
--- V: vertical lineto
--- C: curveto
--- S: smooth curveto
--- Q: quadratic BÃ©zier curve
--- T: smooth quadratic BÃ©zier curveto
--- A: elliptical Arc
--- Z: closepath


-- pathLength
   This attribute lets authors specify the total length for the path, in user units.
   Value type: <number> 
   Default value: none
   Animatable: yes


-- "fill" - determines the color of our paths (default "black")
-- "stroke" - adds an outline to the paths
-- "stroke-width" - stroke width

-!- All of the above commands can be expressed with lowercase or uppercase letters.
--- uppercase letters - indicates absolute position.
--- lowercase letters - indicates relative position.


/// todo ///
--- example: paths parameters:
    // 0 0 - start point
    // L - lineto 100 100
    // L - lineto 100 0
    // Z - closepath
    <path d="M 0 0 L100 100 L100 0 Z" style="stroke:#000;  fill:none;" />



--- example:  heart shape
    <path d="M 10,30
            A 20,20 0,0,1 50,30
            A 20,20 0,0,1 90,30
            Q 90,60 50,90
            Q 10,60 10,30 z"/>
    </svg>


--- example: triangular
    <svg width="300" height="300">Â 
      <path d="M150 0 L75 200 L225 200 Z" />
    </svg>


--- example: path
    <16.10.01_tag__svg_path.html>
    <16.10.02_tag__svg_path.html>
    <16.10.03_tag__svg_path.html>



////!////
TODO <paths> tag  is not compilte 
/////





----[todo]-----

-!- check all "
--- example: xxsubjectxx parameters:" 
if there in the right subject

/// TODO #0:
/// make "example: parameters" (template) for all shape.
/// example: 
    <polyline points="x,y x,y" fill="none/color" stroke="color" />


/// TODO #1:
/// at the end of 16. create animation to all of the shape - each in his own location.


/// TODO #2:
/// check if the code example: "xmlns="http://www.w3.org/2000/svg" - has any meaning ??
/// example:
        <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        Â  <line x1="0" y1="80" x2="100" y2="20" stroke="red" />

        <!-- If you do not specify the stroke
            color the line will not be visible -->
        </svg>

/// TODO #3:

-----------------------------------------------------------------------------


